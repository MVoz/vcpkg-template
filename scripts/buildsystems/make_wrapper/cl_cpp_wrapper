#!/bin/bash
# cl_cpp_wrapper
# Wrapper around MS's cl.exe to make it act more like Unix cpp
case $MACHTYPE in
    *-msys)
        slash="-"
        ;;
    *)
        slash="/"
        ;;
esac

# prog specifies the program that should be run cl.exe
prog=cl.exe
debug=
cppopt=("${slash}nologo")
cppopt+=("${slash}E")
verbose=
shared_index=-1

processargs()
{
### Run through every option and convert it to the proper MS one
while test $# -gt 0; do
    case "$1" in
    -D*) optarg= ;;
    -*=*) optarg=`echo "$1" | sed 's/[-_a-zA-Z0-9]*=//'` ;;
    *) optarg= ;;
    esac
    gotparam=1
    case "$1" in
    --help)
        usage
        exit 0
        ;;
    --verbose)
        verbose=1
        ;;
    -*)
        # Remaining '-' options are passed to the compiler
        if test x$optarg != x ; then
            cppopt+=("${slash}${1:1}=$optarg")
        else
            cppopt+=("${slash}${1:1}")
        fi
        ;;

    /*)
        # All '/' options are assumed to be for cpp and are passed through
        cppopt+=("${slash}${1:1}")
        ;;

    *)
        file=$1
        #cppopt+=("$1")
        ;;
    esac
    shift
done
}

# Whitespace in paths is dealt with by setting IFS and using bash arrays

# processargs $CPP_FLAGS
IFS=""
processargs $@

if test x$V = x1 ; then
    verbose=1
fi

if test -n "$verbose" ; then
  echo -n "$prog"
  for opt in "${cppopt[@]}" ; do
    echo -n " \"$opt\""
  done
  echo ""
fi

[ $# -ge 1 -a -f "$1" ] && input="$file" || input="-"

input_file="${file:-/dev/stdin}"
if [ "$input_file" == "/dev/stdin" ]; then
    #echo "STDIN"
    # CL does not support reading from STDIN so it is wrapped here. 
    cp $input_file cppstdtmp.h
    exec $prog ${cppopt[@]} cppstdtmp.h
    rm -f cppstdtmp.h
else
    #echo "FILE"
    exec $prog ${cppopt[@]} $input_file
fi

