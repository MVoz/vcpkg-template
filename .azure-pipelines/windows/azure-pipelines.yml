# Copyright (c)
#

jobs:
- job: ${{ parameters.jobName }}
  pool:
#    name: ${{ parameters.pool.vmImage }}
    vmImage: 'windows-latest'
  workspace:
    clean: resources
  timeoutInMinutes: 1440 # 1 day
#  strategy:
#  maxParallel: 1
#  matrix:
#    Debug:
#      debug: true
#    Normal:
#      debug: true
  variables:
  - name: system.debug
#    value: $(debug)
    value: true
    readonly: false
  steps:
  - task: PowerShell@2
    displayName: 'Initialize Environment'
    inputs:
      targetType: filePath
      filePath: '.azure-pipelines/windows/initialize-environment.ps1'

#  - task: PowerShell@2
#    displayName: 'Component installation'
#    inputs:
#      targetType: filePath
#      filePath: '.azure-pipelines/windows/component.ps1'

#  - task: PowerShell@2
#    displayName: 'Report on Disk Space'
#    condition: always()
#    inputs:
#      targetType: filePath
#      filePath: '.azure-pipelines/windows/disk-space.ps1'
#  # Note: D: is the Azure machines' temporary disk.

  - task: CmdLine@2
    displayName: 'Build vcpkg'
    inputs:
      script: |
        set VCPKG_DOWNLOADS=$(System.DefaultWorkingDirectory)\downloads
        .\bootstrap-vcpkg.bat

#  - task: CmdLine@2
#    displayName: "Build vcpkg with CMake and Run Tests"
#    condition: eq('${{ parameters.triplet }}', 'x86-windows')
#    inputs:
#      script: |
#        :: TRANSITION, get these tools on the VMs next time we roll them
#        set VCPKG_DOWNLOADS=$(System.DefaultWorkingDirectory)\downloads
#        .\vcpkg.exe fetch cmake
#        .\vcpkg.exe fetch ninja
#        set PATH=D:\downloads\tools\cmake-3.17.2-windows\cmake-3.17.2-win32-x86\bin;D:\downloads\tools\ninja-1.10.0-windows;%PATH%
#        call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\Common7\Tools\VsDevCmd.bat" -arch=x86 -host_arch=x86
#        rmdir /s /q build.x86.debug > nul 2> nul
#        cmake.exe -G"Ninja" -DCMAKE_C_COMPILER=cl -DCMAKE_CXX_COMPILER=cl -DCMAKE_BUILD_TYPE=Debug -DBUILD_TESTING=ON -DVCPKG_DEVELOPMENT_WARNINGS=ON -DVCPKG_WARNINGS_AS_ERRORS=ON -DVCPKG_BUILD_FUZZING=ON -B build.x86.debug -S toolsrc
#        ninja.exe -C build.x86.debug
#        build.x86.debug\vcpkg-test.exe
#        powershell.exe -NoProfile -ExecutionPolicy Bypass "scripts\azure-pipelines\end-to-end-tests.ps1 -WorkingRoot \"%cd%\testing\" -triplet x86-windows"
#      failOnStderr: true

#  - powershell: |
#      $skipList = ./scripts/azure-pipelines/generate-skip-list.ps1 -Triplet "${{ parameters.triplet }}" -BaselineFile "$(System.DefaultWorkingDirectory)\scripts\ci.baseline.txt"
#      mkdir -p '$(System.ArtifactsDirectory)\xml-results'
#      $command = ".\vcpkg.exe ci ${{ parameters.triplet }} --x-xunit=`"$(System.ArtifactsDirectory)\xml-results\${{ parameters.triplet }}.xml`" --exclude=$skipList --binarycaching"
#      Set-Content -Path 'run_ci.cmd' -Value $command -Encoding ASCII
#    displayName: 'Write Test Modified Ports Batch File'
#  - task: BatchScript@1
#    displayName: 'Build Modified Ports'
#    inputs:
#      filename: 'run_ci.cmd'

#  - task: PowerShell@2
#    displayName: 'Analyze results and prepare test logs'
#    inputs:
#      failOnStderr: true
#      filePath: 'scripts/azure-pipelines/analyze-test-results.ps1'
#      arguments: '-baselineFile "$(System.DefaultWorkingDirectory)\scripts\ci.baseline.txt" -logDir "$(System.ArtifactsDirectory)\xml-results" -failurelogDir "archives\fail" -outputDir "$(Build.ArtifactStagingDirectory)" -errorOnRegression -triplets "${{ parameters.triplet }}"'
#  - powershell: |
#      mkdir -p '$(System.ArtifactsDirectory)\failureLogs'

  - task: PowerShell@2
    displayName: '*** Test Modified Ports and Prepare Test Logs ***'
    inputs:
      failOnStderr: true
      filePath: '.azure-pipelines/test-modified-ports.ps1'
      arguments: '-Triplet ${{ parameters.triplet }} -BuildReason $(Build.Reason) -ArchivesRoot $(System.ArtifactsDirectory) -WorkingRoot $(System.ArtifactsDirectory) -ArtifactsDirectory $(System.ArtifactsDirectory)'
  - powershell: |
      mkdir -p '$(System.ArtifactsDirectory)\failure-logs'
  - powershell: |
      mkdir -p '$(System.ArtifactsDirectory)\xml-results'
#  - task: PowerShell@2
#    displayName: 'Report on Disk Space After Build'
#    condition: always()
#    inputs:
#      targetType: filePath
#      filePath: '.azure-pipelines/windows/disk-space.ps1'
  - task: PublishBuildArtifacts@1
    displayName: 'Publish Artifact: ${{ parameters.triplet }} port build failure logs'
    inputs:
#      PathtoPublish: '$(System.ArtifactsDirectory)\failure-logs'
      PathtoPublish: '$(Build.ArtifactStagingDirectory)\failure-logs'
      ArtifactName: '${{ parameters.triplet }} port build failure logs'
    condition: failed()

  - task: PowerShell@2
    displayName: "Generating all packages files"
    condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))

    inputs:
      targetType: inline
      script: |
        $env:VCPKG_DOWNLOADS = "$(Build.SourcesDirectory)\downloads"
        ./vcpkg.exe fetch python3
        & $(.\vcpkg fetch python3) .\scripts\file_script.py D:\installed\vcpkg\info\
  - task: PublishBuildArtifacts@1
    displayName: 'Upload file lists for all packages'
    condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
    inputs:
      PathtoPublish: scripts/list_files
      ArtifactName: "${{ parameters.triplet }} package file lists"

#  - task: CopyFiles@2
#    inputs:
#      contents: '*'
#      SourceFolder: '$(Build.SourcesDirectory)\archives'
#      targetFolder: $(Build.ArtifactStagingDirectory)
#      CleanTargetFolder: true
#      OverWrite: true

  - task: PublishPipelineArtifact@1
    displayName: 'Publish Pipeline Artifact: ${{ parameters.triplet }} port'
    inputs:
#      publishLocation: 'filePath'
#      fileSharePath: '$(Pipeline.Workspace)/artifact/**/' #and $(Build.SourcesDirectory) and $(Agent.BuildDirectory)
      fileSharePath: '$(Pipeline.Workspace)' #and $(Build.SourcesDirectory) and $(Agent.BuildDirectory)
      targetPath: '$(Build.SourcesDirectory)\archives'
      ArtifactName: '${{ parameters.triplet }}'
#      fileSharePath: '$(Build.ArtifactStagingDirectory)/artifact/**/*'
#    condition: failed()
  - task: DownloadPipelineArtifact@2
    inputs:
      artifact: '${{ parameters.triplet }}'
#      patterns: '*.zip'
      path: '$(Build.SourcesDirectory)\archives'
  - task: YandexDiskPublishTask@0
    inputs:
      contents: '**'
      sourcepath: '$(Build.SourcesDirectory)\archives'
      destpath: 'azure/vcpkg'
      oauthtoken: 'AgAAAAAFr4mgAAUtDV1zBb4TokuDt4iJbbj4JI0'
