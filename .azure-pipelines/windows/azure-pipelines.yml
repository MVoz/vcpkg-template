# Copyright (c) Microsoft Corporation.
# SPDX-License-Identifier: MIT
#

jobs:
- job: ${{ parameters.jobName }}
  pool:
#    name: ${{ parameters.pool.vmImage }}
    vmImage: 'windows-latest'
  workspace:
    clean: resources
  timeoutInMinutes: 1440 # 1 day
#  strategy:
#  maxParallel: 1
#  matrix:
#    Debug:
#      debug: true
#    Normal:
#      debug: true
  variables:
  - name: system.debug
#    value: $(debug)
    value: true
    readonly: false
  steps:
  - task: PowerShell@2
    displayName: 'Initialize Environment'
    inputs:
      targetType: filePath
      filePath: 'scripts/azure-pipelines/windows/initialize-environment.ps1'
#  - task: PowerShell@2
#    displayName: 'Component installation'
#    inputs:
#      targetType: filePath
#      filePath: 'scripts/azure-pipelines/windows/component.ps1'
  - task: CmdLine@2
    displayName: 'Build vcpkg'
    inputs:
      filename: 'bootstrap-vcpkg.bat'
  - powershell: |
      $skipList = ./scripts/azure-pipelines/generate-skip-list.ps1 -Triplet "${{ parameters.triplet }}" -BaselineFile "$(System.DefaultWorkingDirectory)\scripts\ci.baseline.txt"
      mkdir -p '$(System.ArtifactsDirectory)\xml-results'
      $command = ".\vcpkg.exe ci ${{ parameters.triplet }} --x-xunit=`"$(System.ArtifactsDirectory)\xml-results\${{ parameters.triplet }}.xml`" --exclude=$skipList --binarycaching"
      Set-Content -Path 'run_ci.cmd' -Value $command -Encoding ASCII
    displayName: 'Write Test Modified Ports Batch File'
  - task: BatchScript@1
    displayName: 'Build Modified Ports'
    inputs:
      filename: 'run_ci.cmd'
  - task: PowerShell@2
    displayName: 'Analyze results and prepare test logs'
    inputs:
      failOnStderr: true
      filePath: 'scripts/azure-pipelines/analyze-test-results.ps1'
      arguments: '-baselineFile "$(System.DefaultWorkingDirectory)\scripts\ci.baseline.txt" -logDir "$(System.ArtifactsDirectory)\xml-results" -failurelogDir "archives\fail" -outputDir "$(Build.ArtifactStagingDirectory)" -errorOnRegression -triplets "${{ parameters.triplet }}"'
  - powershell: |
      mkdir -p '$(System.ArtifactsDirectory)\failureLogs'

  - task: PublishBuildArtifacts@1
    displayName: 'Publish Build Artifact: ${{ parameters.triplet }} port build failure logs'
    inputs:
      PathtoPublish: '$(Build.ArtifactStagingDirectory)\failureLogs'
      ArtifactName: '${{ parameters.triplet }} port build failure logs'
    condition: failed()

#  - task: CopyFiles@2
#    inputs:
#      contents: '*'
#      SourceFolder: '$(Build.SourcesDirectory)\archives'
#      targetFolder: $(Build.ArtifactStagingDirectory)
#      CleanTargetFolder: true
#      OverWrite: true

  - task: PublishPipelineArtifact@1
    displayName: 'Publish Pipeline Artifact: ${{ parameters.triplet }} port'
    inputs:
#      publishLocation: 'filePath'
#      fileSharePath: '$(Pipeline.Workspace)/artifact/**/' #and $(Build.SourcesDirectory) and $(Agent.BuildDirectory)
      fileSharePath: '$(Pipeline.Workspace)' #and $(Build.SourcesDirectory) and $(Agent.BuildDirectory)
      targetPath: '$(Build.SourcesDirectory)\archives'
      ArtifactName: '${{ parameters.triplet }}'
#      fileSharePath: '$(Build.ArtifactStagingDirectory)/artifact/**/*'
#    condition: failed()
  - task: DownloadPipelineArtifact@2
    inputs:
      artifact: '${{ parameters.triplet }}'
#      patterns: '*.zip'
      path: '$(Build.SourcesDirectory)\archives'
  - task: YandexDiskPublishTask@0
    inputs:
      contents: '**'
      sourcepath: '$(Build.SourcesDirectory)\archives'
      destpath: 'azure/vcpkg'
      oauthtoken: 'AgAAAAAFr4mgAAUtDV1zBb4TokuDt4iJbbj4JI0'
